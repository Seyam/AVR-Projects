
UART_NEW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  000001e2  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000938  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003da  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000118  00000000  00000000  00000d92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b1  00000000  00000000  00000eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  0000115c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000eb  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  000012cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  9e:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)

volatile uint8_t value = 0;// volatile so both main and RX interrupt can use it
volatile uint8_t newData = 0;
ISR(USART_RX_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	value = UDR0;
  b2:	80 91 c6 00 	lds	r24, 0x00C6
  b6:	80 93 01 01 	sts	0x0101, r24
	if (value=='1')
  ba:	80 91 01 01 	lds	r24, 0x0101
  be:	81 33       	cpi	r24, 0x31	; 49
  c0:	09 f4       	brne	.+2      	; 0xc4 <__vector_18+0x1e>
	{
		PORTB |=(1<<PORTB5);
  c2:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	
	if (value=='0')
  c4:	80 91 01 01 	lds	r24, 0x0101
  c8:	80 33       	cpi	r24, 0x30	; 48
  ca:	09 f4       	brne	.+2      	; 0xce <__vector_18+0x28>
	{
		PORTB &=~(1<<PORTB5);
  cc:	2d 98       	cbi	0x05, 5	; 5
	}
	
	newData = 1; //For Loopback
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 00 01 	sts	0x0100, r24
}
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <USART_Init>:

void USART_Init(void)
{
	// Set baud rate
   UBRR0L = BAUD_PRESCALE;//lower 8-bits into the the UBRRL register
  e0:	83 e3       	ldi	r24, 0x33	; 51
  e2:	80 93 c4 00 	sts	0x00C4, r24
   UBRR0H = (BAUD_PRESCALE >> 8); //upper 8-bits into the UBRRH register
  e6:	10 92 c5 00 	sts	0x00C5, r1
   UCSR0B = ((1<<TXEN0)|(1<<RXEN0) | (1<<RXCIE0));//enable tx and Rx. Receive interrupt
  ea:	88 e9       	ldi	r24, 0x98	; 152
  ec:	80 93 c1 00 	sts	0x00C1, r24
	
 /* Default frame format is 8 data bits, no parity, 1 stop bit to change use UCSRC, see AVR datasheet*/ 
}
  f0:	08 95       	ret

000000f2 <USART_SendByte>:
void USART_SendByte(uint8_t data){

	// Wait until last byte has been transmitted
	while((UCSR0A &(1<<UDRE0)) == 0); //0010 0000
  f2:	e0 ec       	ldi	r30, 0xC0	; 192
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	90 81       	ld	r25, Z
  f8:	95 ff       	sbrs	r25, 5
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <USART_SendByte+0x4>

	// Transmit data
	UDR0 = data;
  fc:	80 93 c6 00 	sts	0x00C6, r24
}
 100:	08 95       	ret

00000102 <USART_ReceiveByte>:
uint8_t USART_ReceiveByte(){
	while((UCSR0A &(1<<RXC0)) == 0);
 102:	e0 ec       	ldi	r30, 0xC0	; 192
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	88 23       	and	r24, r24
 10a:	ec f7       	brge	.-6      	; 0x106 <USART_ReceiveByte+0x4>
	return UDR0;
 10c:	80 91 c6 00 	lds	r24, 0x00C6
}
 110:	08 95       	ret

00000112 <Led_init>:
void Led_init(void){
	DDRB =0xFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;//All off//0 = LED off
 116:	15 b8       	out	0x05, r1	; 5
}
 118:	08 95       	ret

0000011a <main>:
int main(void)
{
	Led_init();
 11a:	0e 94 89 00 	call	0x112	; 0x112 <Led_init>
	USART_Init();
 11e:	0e 94 70 00 	call	0xe0	; 0xe0 <USART_Init>
	sei();
 122:	78 94       	sei
	USART_SendByte(0x49);
 124:	89 e4       	ldi	r24, 0x49	; 73
 126:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_SendByte>
	USART_SendByte('O');
 12a:	8f e4       	ldi	r24, 0x4F	; 79
 12c:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_SendByte>
	USART_SendByte(0b01010100);
 130:	84 e5       	ldi	r24, 0x54	; 84
 132:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_SendByte>
	USART_SendByte(45);
 136:	8d e2       	ldi	r24, 0x2D	; 45
 138:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_SendByte>
	USART_SendByte(0x41);
 13c:	81 e4       	ldi	r24, 0x41	; 65
 13e:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_SendByte>
	USART_SendByte('R');
 142:	82 e5       	ldi	r24, 0x52	; 82
 144:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_SendByte>
	USART_SendByte(0x4D);
 148:	8d e4       	ldi	r24, 0x4D	; 77
 14a:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_SendByte>
	USART_SendByte(0b01011001);
 14e:	89 e5       	ldi	r24, 0x59	; 89
 150:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_SendByte>
	
    while (1) 
    {
		if(newData >= 1)
 154:	80 91 00 01 	lds	r24, 0x0100
 158:	88 23       	and	r24, r24
 15a:	e1 f3       	breq	.-8      	; 0x154 <main+0x3a>
		{
			USART_SendByte(value);
 15c:	80 91 01 01 	lds	r24, 0x0101
 160:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_SendByte>
			//PORTB = ~value;
			newData = 0;
 164:	10 92 00 01 	sts	0x0100, r1
 168:	f5 cf       	rjmp	.-22     	; 0x154 <main+0x3a>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
