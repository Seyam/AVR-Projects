
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000898  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000424  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000147  00000000  00000000  00000d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000363  00000000  00000000  00000e83  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  000011e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000108  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000060  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main (void)
{
	
	DDRD = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	81 bb       	out	0x11, r24	; 17

	while (1)
	{
		
		//if(PINC & (1<<PC0)){
			for(int i=1; i<=256; i=i*2){
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	69 e0       	ldi	r22, 0x09	; 9
  9c:	70 e0       	ldi	r23, 0x00	; 0
  9e:	e0 e0       	ldi	r30, 0x00	; 0
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	a1 e0       	ldi	r26, 0x01	; 1
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	09 c0       	rjmp	.+18     	; 0xba <main+0x28>
			PORTD =i;
  a8:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	c7 ea       	ldi	r28, 0xA7	; 167
  ac:	d1 e6       	ldi	r29, 0x61	; 97
  ae:	21 97       	sbiw	r28, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x1c>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x22>
  b4:	00 00       	nop

	while (1)
	{
		
		//if(PINC & (1<<PC0)){
			for(int i=1; i<=256; i=i*2){
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	d1 e0       	ldi	r29, 0x01	; 1
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	9d 07       	cpc	r25, r29
  c0:	9c f3       	brlt	.-26     	; 0xa8 <main+0x16>
  c2:	9b 01       	movw	r18, r22
  c4:	af 01       	movw	r20, r30
		
		
		//else{	 	
		 		
			for(int i=256; i>=1; i=i/2){
			PORTD =i;
  c6:	42 bb       	out	0x12, r20	; 18
  c8:	87 ea       	ldi	r24, 0xA7	; 167
  ca:	91 e6       	ldi	r25, 0x61	; 97
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x3a>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x40>
  d2:	00 00       	nop
			}
		
		
		//else{	 	
		 		
			for(int i=256; i>=1; i=i/2){
  d4:	ca 01       	movw	r24, r20
  d6:	99 23       	and	r25, r25
  d8:	0c f4       	brge	.+2      	; 0xdc <main+0x4a>
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	ac 01       	movw	r20, r24
  de:	55 95       	asr	r21
  e0:	47 95       	ror	r20
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	30 40       	sbci	r19, 0x00	; 0
  e6:	79 f7       	brne	.-34     	; 0xc6 <main+0x34>

	while (1)
	{
		
		//if(PINC & (1<<PC0)){
			for(int i=1; i<=256; i=i*2){
  e8:	cd 01       	movw	r24, r26
  ea:	e7 cf       	rjmp	.-50     	; 0xba <main+0x28>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
