
My_USART3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000164  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000082  00800100  00800100  000001d8  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000930  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000421  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000fc  00000000  00000000  00000dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a3  00000000  00000000  00000ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001170  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000de  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d1  00000000  00000000  000012c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e6       	ldi	r30, 0x64	; 100
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 38       	cpi	r26, 0x82	; 130
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 76 00 	call	0xec	; 0xec <main>
  9e:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <peekChar>:
 
char peekChar(void)
{
    char ret = '\0';
     
    if(rxReadPos != rxWritePos)
  a6:	80 91 01 01 	lds	r24, 0x0101
  aa:	90 91 00 01 	lds	r25, 0x0100
  ae:	89 17       	cp	r24, r25
  b0:	31 f0       	breq	.+12     	; 0xbe <peekChar+0x18>
    {
        ret = rxBuffer[rxReadPos];
  b2:	e2 e0       	ldi	r30, 0x02	; 2
  b4:	f1 e0       	ldi	r31, 0x01	; 1
  b6:	e8 0f       	add	r30, r24
  b8:	f1 1d       	adc	r31, r1
  ba:	80 81       	ld	r24, Z
  bc:	08 95       	ret
    }
}
 
char peekChar(void)
{
    char ret = '\0';
  be:	80 e0       	ldi	r24, 0x00	; 0
    {
        ret = rxBuffer[rxReadPos];
    }
     
    return ret;
}
  c0:	08 95       	ret

000000c2 <getChar>:
 
char getChar(void)
{
    char ret = '\0';
     
    if(rxReadPos != rxWritePos)
  c2:	90 91 01 01 	lds	r25, 0x0101
  c6:	80 91 00 01 	lds	r24, 0x0100
  ca:	98 17       	cp	r25, r24
  cc:	69 f0       	breq	.+26     	; 0xe8 <getChar+0x26>
    {
        ret = rxBuffer[rxReadPos];
  ce:	e2 e0       	ldi	r30, 0x02	; 2
  d0:	f1 e0       	ldi	r31, 0x01	; 1
  d2:	e9 0f       	add	r30, r25
  d4:	f1 1d       	adc	r31, r1
  d6:	80 81       	ld	r24, Z
         
        rxReadPos++;
  d8:	9f 5f       	subi	r25, 0xFF	; 255
  da:	90 93 01 01 	sts	0x0101, r25
         
        if(rxReadPos >= RX_BUFFER_SIZE)
  de:	99 23       	and	r25, r25
  e0:	24 f4       	brge	.+8      	; 0xea <getChar+0x28>
        {
            rxReadPos = 0;
  e2:	10 92 01 01 	sts	0x0101, r1
  e6:	08 95       	ret
    return ret;
}
 
char getChar(void)
{
    char ret = '\0';
  e8:	80 e0       	ldi	r24, 0x00	; 0
            rxReadPos = 0;
        }
    }
     
    return ret;
}
  ea:	08 95       	ret

000000ec <main>:
char getChar(void);
char peekChar(void);
 
int main(void)
{
    UBRR0H = (BRC >> 8);
  ec:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L =  BRC;  
  f0:	87 e6       	ldi	r24, 0x67	; 103
  f2:	80 93 c4 00 	sts	0x00C4, r24
     
    UCSR0B = (1 << RXEN0)  | (1 << RXCIE0);
  f6:	80 e9       	ldi	r24, 0x90	; 144
  f8:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	80 93 c2 00 	sts	0x00C2, r24
     
    DDRB = (1 << PORTB0);
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	84 b9       	out	0x04, r24	; 4
     
    sei();
 106:	78 94       	sei
     
    while(1)
    {
        char c = getChar();
 108:	0e 94 61 00 	call	0xc2	; 0xc2 <getChar>
         
        if(c == '1')
 10c:	81 33       	cpi	r24, 0x31	; 49
 10e:	11 f4       	brne	.+4      	; 0x114 <main+0x28>
        {
            sbi(PORTB, PORTB0);
 110:	28 9a       	sbi	0x05, 0	; 5
 112:	fa cf       	rjmp	.-12     	; 0x108 <main+0x1c>
        }
        else if(c =='0')
 114:	80 33       	cpi	r24, 0x30	; 48
 116:	c1 f7       	brne	.-16     	; 0x108 <main+0x1c>
        {
            cbi(PORTB, PORTB0);
 118:	28 98       	cbi	0x05, 0	; 5
 11a:	f6 cf       	rjmp	.-20     	; 0x108 <main+0x1c>

0000011c <__vector_18>:
     
    return ret;
}
 
ISR(USART_RX_vect)
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
    rxBuffer[rxWritePos] = UDR0;
 12e:	80 91 00 01 	lds	r24, 0x0100
 132:	90 91 c6 00 	lds	r25, 0x00C6
 136:	e2 e0       	ldi	r30, 0x02	; 2
 138:	f1 e0       	ldi	r31, 0x01	; 1
 13a:	e8 0f       	add	r30, r24
 13c:	f1 1d       	adc	r31, r1
 13e:	90 83       	st	Z, r25
     
    rxWritePos++;
 140:	8f 5f       	subi	r24, 0xFF	; 255
 142:	80 93 00 01 	sts	0x0100, r24
     
    if(rxWritePos >= RX_BUFFER_SIZE)
 146:	88 23       	and	r24, r24
 148:	14 f4       	brge	.+4      	; 0x14e <__vector_18+0x32>
    {
        rxWritePos = 0;
 14a:	10 92 00 01 	sts	0x0100, r1
    }
}
 14e:	ff 91       	pop	r31
 150:	ef 91       	pop	r30
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
