
MY_USART2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000001f8  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  00800108  00800108  00000294  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004ab  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000016c  00000000  00000000  00000ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d3  00000000  00000000  00001167  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010e  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f6  00000000  00000000  000015f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 38       	cpi	r26, 0x8C	; 140
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  9e:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:


void USART_Init( unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  a6:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  aa:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
  ae:	88 e9       	ldi	r24, 0x98	; 152
  b0:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (3<<UCSZ00);
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	80 93 c2 00 	sts	0x00C2, r24
}
  ba:	08 95       	ret

000000bc <USART_Receive>:


unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	88 23       	and	r24, r24
  c4:	ec f7       	brge	.-6      	; 0xc0 <USART_Receive+0x4>
	/* Get and return received data from buffer */
	return UDR0;
  c6:	80 91 c6 00 	lds	r24, 0x00C6
}
  ca:	08 95       	ret

000000cc <USART_Transmit>:


void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
  cc:	e0 ec       	ldi	r30, 0xC0	; 192
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	90 81       	ld	r25, Z
  d2:	95 ff       	sbrs	r25, 5
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <USART_Transmit+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
  d6:	80 93 c6 00 	sts	0x00C6, r24
}
  da:	08 95       	ret

000000dc <peekChar>:

char peekChar(void)
{
	char ret = '\0';
	
	if(rxReadPos != rxWritePos)
  dc:	80 91 0a 01 	lds	r24, 0x010A
  e0:	90 91 0b 01 	lds	r25, 0x010B
  e4:	20 91 08 01 	lds	r18, 0x0108
  e8:	30 91 09 01 	lds	r19, 0x0109
  ec:	82 17       	cp	r24, r18
  ee:	93 07       	cpc	r25, r19
  f0:	29 f0       	breq	.+10     	; 0xfc <peekChar+0x20>
	{
		ret = rxBuffer[rxReadPos];
  f2:	84 5f       	subi	r24, 0xF4	; 244
  f4:	9e 4f       	sbci	r25, 0xFE	; 254
  f6:	fc 01       	movw	r30, r24
  f8:	80 81       	ld	r24, Z
  fa:	08 95       	ret
}


char peekChar(void)
{
	char ret = '\0';
  fc:	80 e0       	ldi	r24, 0x00	; 0
	{
		ret = rxBuffer[rxReadPos];
	}
	
	return ret;
}
  fe:	08 95       	ret

00000100 <getChar>:

char getChar(void)
{
	char ret = '\0';
	
	if(rxReadPos != rxWritePos)
 100:	20 91 0a 01 	lds	r18, 0x010A
 104:	30 91 0b 01 	lds	r19, 0x010B
 108:	80 91 08 01 	lds	r24, 0x0108
 10c:	90 91 09 01 	lds	r25, 0x0109
 110:	28 17       	cp	r18, r24
 112:	39 07       	cpc	r19, r25
 114:	91 f0       	breq	.+36     	; 0x13a <getChar+0x3a>
	{
		ret = rxBuffer[rxReadPos];
 116:	f9 01       	movw	r30, r18
 118:	e4 5f       	subi	r30, 0xF4	; 244
 11a:	fe 4f       	sbci	r31, 0xFE	; 254
 11c:	80 81       	ld	r24, Z
		
		rxReadPos++;
 11e:	2f 5f       	subi	r18, 0xFF	; 255
 120:	3f 4f       	sbci	r19, 0xFF	; 255
 122:	30 93 0b 01 	sts	0x010B, r19
 126:	20 93 0a 01 	sts	0x010A, r18
		
		if(rxReadPos >= RX_BUFFER_SIZE)
 12a:	20 38       	cpi	r18, 0x80	; 128
 12c:	31 05       	cpc	r19, r1
 12e:	30 f0       	brcs	.+12     	; 0x13c <getChar+0x3c>
		{
			rxReadPos = 0;
 130:	10 92 0b 01 	sts	0x010B, r1
 134:	10 92 0a 01 	sts	0x010A, r1
 138:	08 95       	ret
	return ret;
}

char getChar(void)
{
	char ret = '\0';
 13a:	80 e0       	ldi	r24, 0x00	; 0
			rxReadPos = 0;
		}
	}
	
	return ret;
}
 13c:	08 95       	ret

0000013e <main>:
	UDR0 = data;
}

int main(void)
{
	DDRB=(1<<PORTB5);
 13e:	80 e2       	ldi	r24, 0x20	; 32
 140:	84 b9       	out	0x04, r24	; 4
	
	sei();
 142:	78 94       	sei
	
	USART_Init(MYUBRR);
 144:	83 e3       	ldi	r24, 0x33	; 51
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
       //USART_Transmit(USART_Receive());
	   //string x= (string)USART_Receive();
	   
	    char c = getChar();
			 
		if (strcmp(c, "on") == 0)
 14c:	00 e0       	ldi	r16, 0x00	; 0
 14e:	11 e0       	ldi	r17, 0x01	; 1
			PORTB |=(1<<PORTB5);
					 
	     }
		 
		 
	    if(strcmp(c, "off") == 0)
 150:	0f 2e       	mov	r0, r31
 152:	f3 e0       	ldi	r31, 0x03	; 3
 154:	ef 2e       	mov	r14, r31
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	ff 2e       	mov	r15, r31
 15a:	f0 2d       	mov	r31, r0
		
		
       //USART_Transmit(USART_Receive());
	   //string x= (string)USART_Receive();
	   
	    char c = getChar();
 15c:	0e 94 80 00 	call	0x100	; 0x100 <getChar>
 160:	c8 2f       	mov	r28, r24
			 
		if (strcmp(c, "on") == 0)
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	b8 01       	movw	r22, r16
 166:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <strcmp>
 16a:	28 2f       	mov	r18, r24
 16c:	39 2f       	mov	r19, r25
 16e:	21 15       	cp	r18, r1
 170:	31 05       	cpc	r19, r1
 172:	09 f4       	brne	.+2      	; 0x176 <main+0x38>
		 {
						
			PORTB |=(1<<PORTB5);
 174:	2d 9a       	sbi	0x05, 5	; 5
					 
	     }
		 
		 
	    if(strcmp(c, "off") == 0)
 176:	8c 2f       	mov	r24, r28
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	b7 01       	movw	r22, r14
 17c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <strcmp>
 180:	28 2f       	mov	r18, r24
 182:	39 2f       	mov	r19, r25
 184:	21 15       	cp	r18, r1
 186:	31 05       	cpc	r19, r1
 188:	49 f7       	brne	.-46     	; 0x15c <main+0x1e>
	     {			
			PORTB &=~(1<<PORTB5);
 18a:	2d 98       	cbi	0x05, 5	; 5
 18c:	e7 cf       	rjmp	.-50     	; 0x15c <main+0x1e>

0000018e <__vector_18>:




ISR(USART_RX_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
	rxBuffer[rxWritePos] = UDR0;
 1a2:	80 91 08 01 	lds	r24, 0x0108
 1a6:	90 91 09 01 	lds	r25, 0x0109
 1aa:	20 91 c6 00 	lds	r18, 0x00C6
 1ae:	fc 01       	movw	r30, r24
 1b0:	e4 5f       	subi	r30, 0xF4	; 244
 1b2:	fe 4f       	sbci	r31, 0xFE	; 254
 1b4:	20 83       	st	Z, r18
	
	rxWritePos++;
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	90 93 09 01 	sts	0x0109, r25
 1bc:	80 93 08 01 	sts	0x0108, r24
	
	if(rxWritePos >= RX_BUFFER_SIZE)
 1c0:	80 38       	cpi	r24, 0x80	; 128
 1c2:	91 05       	cpc	r25, r1
 1c4:	20 f0       	brcs	.+8      	; 0x1ce <__vector_18+0x40>
	{
		rxWritePos = 0;
 1c6:	10 92 09 01 	sts	0x0109, r1
 1ca:	10 92 08 01 	sts	0x0108, r1
	}
 1ce:	ff 91       	pop	r31
 1d0:	ef 91       	pop	r30
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	2f 91       	pop	r18
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <strcmp>:
 1e2:	fb 01       	movw	r30, r22
 1e4:	dc 01       	movw	r26, r24
 1e6:	8d 91       	ld	r24, X+
 1e8:	01 90       	ld	r0, Z+
 1ea:	80 19       	sub	r24, r0
 1ec:	01 10       	cpse	r0, r1
 1ee:	d9 f3       	breq	.-10     	; 0x1e6 <strcmp+0x4>
 1f0:	99 0b       	sbc	r25, r25
 1f2:	08 95       	ret

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
