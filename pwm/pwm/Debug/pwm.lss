
pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b7  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000720  00000000  00000000  00000b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000337  00000000  00000000  0000124f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001588  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d3  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b1  00000000  00000000  000019af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  88:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_init>:
uint8_t brightness;


void ADC_init(void)
{
    ADMUX|=(0<<REFS0) | (1<<REFS1)|(0<<MUX0); // ADC Voltage Reference: 5V(internal)
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 68       	ori	r24, 0x80	; 128
  98:	80 83       	st	Z, r24
    ADCSRA|=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (1<<ADIE) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
  9a:	ea e7       	ldi	r30, 0x7A	; 122
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	8f 6e       	ori	r24, 0xEF	; 239
  a2:	80 83       	st	Z, r24
    DIDR0 |=(0<<ADC0D);// ADC in A0 at pin PC0 potentiometer 10K
  a4:	ee e7       	ldi	r30, 0x7E	; 126
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	80 83       	st	Z, r24
  ac:	08 95       	ret

000000ae <PWM_init>:
void PWM_init()
{
        // initialize timer0 in PWM mode Phase Correct PWM
        //Clear OC0A on Compare Match when up-counting. Set OC0A onCompare Match when down-counting.
        
        TCCR0A= (1<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (1<<WGM00);
  ae:	81 e8       	ldi	r24, 0x81	; 129
  b0:	84 bd       	out	0x24, r24	; 36
        
        //(No prescaling)
        
        TCCR0B= (0<<WGM02) | (0<<CS02) | (0<<CS01) | (1<<CS00);
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	85 bd       	out	0x25, r24	; 37
        TCNT0=0x00;
  b6:	16 bc       	out	0x26, r1	; 38
        OCR0A=0x00;
  b8:	17 bc       	out	0x27, r1	; 39
        OCR0B=0x00;
  ba:	18 bc       	out	0x28, r1	; 40
        
        // make sure to make OC0 pin (pin PB6 for atmega328P) as output pin
        DDRD |= (1<<PORTD3);
  bc:	53 9a       	sbi	0x0a, 3	; 10
  be:	08 95       	ret

000000c0 <ADC_Converter>:
        // Timer/Counter 0 Interrupt(s) initialization
        //TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
}
unsigned int ADC_Converter(unsigned char valor)
{
    ADMUX= valor| ADC_VREF_TYPE; // ADC Voltage Reference: 5V(internal)
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	85 e3       	ldi	r24, 0x35	; 53
  c8:	8a 95       	dec	r24
  ca:	f1 f7       	brne	.-4      	; 0xc8 <ADC_Converter+0x8>
  cc:	00 00       	nop
    // Delay needed for the stabilization of the ADC input voltage
    _delay_us(10);
    // Start the AD conversion
    ADCSRA|=(1<<ADSC);
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24
    // Wait for the AD conversion to complete
    while ((ADCSRA & (1<<ADIF))==0);
  d8:	80 81       	ld	r24, Z
  da:	84 ff       	sbrs	r24, 4
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <ADC_Converter+0x18>
    ADCSRA|=(1<<ADIF);
  de:	ea e7       	ldi	r30, 0x7A	; 122
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 61       	ori	r24, 0x10	; 16
  e6:	80 83       	st	Z, r24
  e8:	85 e3       	ldi	r24, 0x35	; 53
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <ADC_Converter+0x2a>
  ee:	00 00       	nop
    _delay_us(10);
    return ADCW;
  f0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  f4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  f8:	08 95       	ret

000000fa <main>:
 
int main(void)
{
    
    ADC_init();
  fa:	0e 94 48 00 	call	0x90	; 0x90 <ADC_init>
    PWM_init();
  fe:	0e 94 57 00 	call	0xae	; 0xae <PWM_init>
    while(1)
    {
        ADC_Converter(0);
        brightness =ADCW/4; // converter 1023 to 255
 102:	c8 e7       	ldi	r28, 0x78	; 120
 104:	d0 e0       	ldi	r29, 0x00	; 0
        
        switch (brightness)
        {
            case 255:
            OCR0A=0xFF;
 106:	1f ef       	ldi	r17, 0xFF	; 255
    
    ADC_init();
    PWM_init();
    while(1)
    {
        ADC_Converter(0);
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 60 00 	call	0xc0	; 0xc0 <ADC_Converter>
        brightness =ADCW/4; // converter 1023 to 255
 10e:	88 81       	ld	r24, Y
 110:	99 81       	ldd	r25, Y+1	; 0x01
 112:	96 95       	lsr	r25
 114:	87 95       	ror	r24
 116:	96 95       	lsr	r25
 118:	87 95       	ror	r24
 11a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
        
        switch (brightness)
 11e:	88 23       	and	r24, r24
 120:	51 f0       	breq	.+20     	; 0x136 <main+0x3c>
 122:	8f 3f       	cpi	r24, 0xFF	; 255
 124:	79 f4       	brne	.+30     	; 0x144 <main+0x4a>
        {
            case 255:
            OCR0A=0xFF;
 126:	17 bd       	out	0x27, r17	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	8f e3       	ldi	r24, 0x3F	; 63
 12a:	9c e9       	ldi	r25, 0x9C	; 156
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <main+0x32>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x38>
 132:	00 00       	nop
 134:	07 c0       	rjmp	.+14     	; 0x144 <main+0x4a>
            _delay_ms(10);
            break;
            case 0:
            OCR0A=0x00;
 136:	17 bc       	out	0x27, r1	; 39
 138:	8f e3       	ldi	r24, 0x3F	; 63
 13a:	9c e9       	ldi	r25, 0x9C	; 156
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x42>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x48>
 142:	00 00       	nop
            _delay_ms(10);
            break;
        }
        if (brightness > 0 || brightness < 255)
        {
            OCR0A = brightness ;
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 148:	87 bd       	out	0x27, r24	; 39
 14a:	8f e3       	ldi	r24, 0x3F	; 63
 14c:	9c e9       	ldi	r25, 0x9C	; 156
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <main+0x54>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x5a>
 154:	00 00       	nop
 156:	d8 cf       	rjmp	.-80     	; 0x108 <main+0xe>

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
