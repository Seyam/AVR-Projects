
AVR_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000748  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069b  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b2  00000000  00000000  0000104b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00001300  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039d  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011e  00000000  00000000  00001749  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001867  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_11>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_12>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_14>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  78:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_11>:

#define LED_ON	 PORTB |= (1<<PORTB3)
#define LED_OFF		PORTB &= ~(1<<PORTB3)
#define LED_TOGGLE		PINB |= (1<<PINB3)

ISR(TIMER1_COMPA_vect){
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1

	LED_ON;
  8a:	2b 9a       	sbi	0x05, 3	; 5
}
  8c:	0f 90       	pop	r0
  8e:	0f be       	out	0x3f, r0	; 63
  90:	0f 90       	pop	r0
  92:	1f 90       	pop	r1
  94:	18 95       	reti

00000096 <__vector_12>:

ISR(TIMER1_COMPB_vect){
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1

	LED_OFF;
  a0:	2b 98       	cbi	0x05, 3	; 5
}
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	0f 90       	pop	r0
  a8:	1f 90       	pop	r1
  aa:	18 95       	reti

000000ac <__vector_14>:

ISR(TIMER0_COMPA_vect){
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	2f 93       	push	r18
  b8:	3f 93       	push	r19
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25

	uint16_t period = OCR1A; //16 bit timer value
  be:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  c2:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	uint16_t duty = OCR1B;	//16 bit timer value
  c6:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  ca:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>

	if (duty < period)
  ce:	82 17       	cp	r24, r18
  d0:	93 07       	cpc	r25, r19
  d2:	10 f4       	brcc	.+4      	; 0xd8 <__vector_14+0x2c>
	{
		duty++;
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	02 c0       	rjmp	.+4      	; 0xdc <__vector_14+0x30>
	} 
	else
	{
		duty=0;
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
	}
	OCR1B = duty;
  dc:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  e0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
}
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	3f 91       	pop	r19
  ea:	2f 91       	pop	r18
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <millis_timer>:


void millis_timer(uint8_t millis){
	TCCR0A |= (1<<WGM01);				//set to CTC mode
  f6:	94 b5       	in	r25, 0x24	; 36
  f8:	92 60       	ori	r25, 0x02	; 2
  fa:	94 bd       	out	0x24, r25	; 36
	TCCR0B |= (1<<CS02) | (1<<CS00);	//set prescaler of 1024(clock select)
  fc:	95 b5       	in	r25, 0x25	; 37
  fe:	95 60       	ori	r25, 0x05	; 5
 100:	95 bd       	out	0x25, r25	; 37
	OCR0A= millis*78125-1;
 102:	9d e2       	ldi	r25, 0x2D	; 45
 104:	89 9f       	mul	r24, r25
 106:	80 2d       	mov	r24, r0
 108:	11 24       	eor	r1, r1
 10a:	81 50       	subi	r24, 0x01	; 1
 10c:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);
 10e:	ee e6       	ldi	r30, 0x6E	; 110
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	82 60       	ori	r24, 0x02	; 2
 116:	80 83       	st	Z, r24
 118:	08 95       	ret

0000011a <PWM_Init>:
}


void PWM_Init(void){
	TCCR1B  |= (1<<CS10) | (1<<WGM12);  //no prescaler,  CTC mode
 11a:	e1 e8       	ldi	r30, 0x81	; 129
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	89 60       	ori	r24, 0x09	; 9
 122:	80 83       	st	Z, r24
	TIMSK1  |= (1<<OCIE1A) | (1<<OCIE1B); //output compare IRQ
 124:	ef e6       	ldi	r30, 0x6F	; 111
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	86 60       	ori	r24, 0x06	; 6
 12c:	80 83       	st	Z, r24
	OCR1A = 800;		//(F_CPU/10,000*2*1)-1
 12e:	80 e2       	ldi	r24, 0x20	; 32
 130:	93 e0       	ldi	r25, 0x03	; 3
 132:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 136:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 400;		//starting duty cycle. will be eventually set to 0 while in loop
 13a:	80 e9       	ldi	r24, 0x90	; 144
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 142:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 146:	08 95       	ret

00000148 <main>:



int main(void)
{	
	DDRB |=(1<<DDB3);
 148:	23 9a       	sbi	0x04, 3	; 4
	millis_timer(1); //delay before updating duty cycle
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 7b 00 	call	0xf6	; 0xf6 <millis_timer>
	PWM_Init();
 150:	0e 94 8d 00 	call	0x11a	; 0x11a <PWM_Init>
	sei();
 154:	78 94       	sei
    /* Replace with your application code */
    while (1) 
    {
    }
 156:	ff cf       	rjmp	.-2      	; 0x156 <main+0xe>

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
